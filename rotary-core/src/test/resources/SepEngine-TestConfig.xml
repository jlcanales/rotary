<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

	<!-- This Spring XML config file contains all elements needed to setup correctly
		 the Scheduled Events Processor engine.
		 It contains some example for job and trigger factories needed to start SepEngine
		 -->

	<!-- **************************************************************** -->
	<!-- This Section contains the SEP engine structure definition -->
	<!-- In this bean all the available job Factories are injected in engine -->
	<!-- **************************************************************** -->
	<bean id="sepEngine" class="org.rotarysource.core.sep.SepEngineQuartzImpl" init-method="start">
		<constructor-arg ref="scheduler" />
		<constructor-arg>
			<map>
				<entry key="taskMockJob" value-ref="mockTaskJobFactory" />
				<entry key="taskMockJobPair" value-ref="mockTaskJobFactoryPair" />
			</map>
		</constructor-arg>
	</bean>

	<!-- **************************************************************** -->
	<!-- This Section contains the Quartz Scheduler configuration         -->
	<!-- Quarth Scheduler is the main component of sepEngine to date jobs -->
	<!-- **************************************************************** -->
	<bean id="scheduler"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean"
		destroy-method="destroy">
		<property name="autoStartup" value="false" />
		<property name="applicationContextSchedulerContextKey" value="applicationContext" />
		<property name="waitForJobsToCompleteOnShutdown" value="true" />
		<property name="overwriteExistingJobs" value="true" />
		<!-- <property name="dataSource" ref="quartzDataSource" /> <property name="transactionManager" 
			ref="quartzTxManager" /> -->
		<property name="jobFactory">
			<bean class="org.springframework.scheduling.quartz.SpringBeanJobFactory" />
		</property>
		<property name="configLocation" value="classpath:quartz.properties" />
	</bean>
	


	<!-- **************************************************************** -->
	<!-- JOB Configuration Section
		 This section setup each kind of job. There must be a job definition for
		 each Task to be executed (defined in property jobDataAsMap as an entry in
		 the param map to inject the Task bean). 
		 For each job type, a job factory bean must be declared to be injected
		 in sepEngine -->
	<!-- **************************************************************** -->

	<!-- Objects Factories for SEP engine -->
	<bean id="mockTaskJobFactory" name="mockTaskJobFactory"
		class="org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean">
		<property name="targetBeanName">
			<idref local="mockTaskJobDetail" />
		</property>
	</bean>
	
	<bean id="mockTaskJobFactoryPair" name="mockTaskJobFactoryPair"
		class="org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean">
		<property name="targetBeanName">
			<idref local="mockTaskJobDetail" />
		</property>
	</bean>

	<!-- **************************************************************** -->
	<!-- *** JOBS *** -->
	<!-- **************************************************************** -->
	<bean id="mockTaskJobDetail" class="org.springframework.scheduling.quartz.JobDetailFactoryBean"
		scope="prototype">
		<property name="jobDataAsMap">
			<map>
				<!-- <entry key="task" value-ref="taskMock" /> -->
				<entry key="task" value-ref="taskMockSpy" />
				
			</map>
		</property>
		<property name="jobClass" value="org.rotarysource.core.sep.job.ScheduledJob" />
		<!-- Durability - if a job is non-durable, it is automatically deleted 
			from the scheduler once there are no longer any active triggers associated 
			with it. -->
		<property name="durability" value="true" />

	</bean>


	<!-- **************************************************************** -->
	<!-- Task Configuration Section
		 This section setup each available Task bean to be injected in
		 each job type -->
	<!-- **************************************************************** -->
	
	<!-- TaskMock will be spy by mockito in the test cases.
	     To be correctly cuantified by mockito, we defined TaskMock as singleton instead
	     prototype.
	     Nevertheless, task beans MUST BE always prototype because each task execution have
	     its own parameters and must be diferent task class instances. -->
	<bean id="taskMock" class="org.rotarysource.core.sep.task.TaskMock"
		scope="singleton">
	</bean>

	<bean id="taskMockSpy" name="taskMockSpy" class="org.mockito.Mockito" factory-method="spy">
		<constructor-arg ref="taskMock"/>
	</bean>



</beans>
